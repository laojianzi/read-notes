'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':3,'href':'/read-notes/posts/mdavatar-released-v1.0.1/','title':"MDAvatar v1.0.1 圆形支持 - 说肝就肝",'section':"Blog",'content':"刚发布 v1.0.0 MDAvatar 头像生成器 v1.0.0 [支持中文] 不久，觉得圆形还是比较刚需，其实也可以 方形图 + css 实现 web 的圆形 img\n不过\u0026hellip;\u0026hellip;\n 支持总好过不支持\n  Release v1.0.1 #  https://github.com/laojianzi/mdavatar/releases/tag/v1.0.1\nAdded #   支持多种 style 构建头像 添加圆形头像构建的 style  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/laojianzi/mdavatar\u0026#34; \u0026#34;github.com/laojianzi/mdavatar/style\u0026#34; ) func main() { avatar, err := mdavatar.New(\u0026#34;MDAvatar\u0026#34;).Builds(style.NewCircle) if err != nil { log.Fatal(err) } filename := fmt.Sprintf(\u0026#34;mdavatar-circle-%d.png\u0026#34;, time.Now().Unix()) file, err := os.Create(filename) if err != nil { log.Fatal(err) } if err := png.Encode(file, avatar); err != nil { log.Fatal(err) } } 参考 #   https://blog.golang.org/image-draw  项目 #  欢迎大家使用 MDAvatar\n如果喜欢帮忙 Srat 和 Fork，如果有疑问可以提 Issue 或者 Email\n Require go version \u0026gt;= 1.13 Require go mod enable  $ go get -u github.com/laojianzi/mdavatar Github: https://github.com/laojianzi/mdavatar\n感谢你阅读本文\n"});index.add({'id':4,'href':'/read-notes/posts/mdavatar-released-v1.0.0/','title':"MDAvatar 头像生成器 v1.0.0 [支持中文]",'section':"Blog",'content':"MDAvatar #  MDAvatar 可以根据字符串生成单字符头像，并且可以高度自定义，支持生成中文头像\n高度自定义\n Require go version \u0026gt;= 1.13 Require go mod enable  $ go get -u github.com/laojianzi/mdavatar 大写首字母 #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/laojianzi/mdavatar\u0026#34; ) func main() { avatar, err := mdavatar.New(\u0026#34;laojianzi\u0026#34;).Build() if err != nil { log.Fatal(err) } filename := fmt.Sprintf(\u0026#34;out-%d.png\u0026#34;, time.Now().Unix()) file, err := os.Create(filename) if err != nil { log.Fatal(err) } if err := png.Encode(file, avatar); err != nil { log.Fatal(err) } } 中文转大写首字母 #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/laojianzi/mdavatar\u0026#34; ) func main() { avatar, err := mdavatar.New(\u0026#34;老健仔\u0026#34;).Build() if err != nil { log.Fatal(err) } filename := fmt.Sprintf(\u0026#34;out-%d.png\u0026#34;, time.Now().Unix()) file, err := os.Create(filename) if err != nil { log.Fatal(err) } if err := png.Encode(file, avatar); err != nil { log.Fatal(err) } } 第一个中文 #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;image/png\u0026#34; \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/laojianzi/mdavatar\u0026#34; ) func main() { avatar, err := mdavatar.New(\u0026#34;老健仔\u0026#34;, mdavatar.WithAsianFont(\u0026#34;static/NotoSansSC-Regular.otf\u0026#34;)).Build() if err != nil { log.Fatal(err) } filename := fmt.Sprintf(\u0026#34;out-%d.png\u0026#34;, time.Now().Unix()) file, err := os.Create(filename) if err != nil { log.Fatal(err) } if err := png.Encode(file, avatar); err != nil { log.Fatal(err) } } 待补充 #   支持 cli (生成 png/jpg) 支持自定义形状 (圆形、椭圆形、方形 \u0026hellip;) 支持多种返回形式 (HTTP、Base64、WriteToFile \u0026hellip;)  项目地址 #  欢迎大家使用 MDAvatar\n如果喜欢帮忙 Srat 和 Fork，如果有疑问可以提 Issue 或者 Email\nGithub: https://github.com/laojianzi/mdavatar\n"});index.add({'id':6,'href':'/read-notes/docs/advanced/csapp/','title':"CSAPP (TODO)",'section':"进阶阶段",'content':"CSAPP (TODO) #  "});index.add({'id':8,'href':'/read-notes/docs/basic/how-computers-work/1/','title':"第 1 章 - 计算机的三大原则",'section':"计算机是怎么连接的",'content':"第 1 章 - 计算机的三大原则 #  阅读前的热身问答\n初级问题 #   硬件和软件的区别是什么?\n  硬件 (Hardware): 计算机硬件 是指有形的物理设备,它是计算机系统中实际物理装置的总称。常见的硬件有:  主板 内存条 磁盘 \u0026hellip;   软件 软件 (Software): 计算机软件 可以理解为可被自动转换成代码化的符号化指令序列。计算机程序包括源程序和目标程序。常见的软件有:  QQ Wechat Curl Wget \u0026hellip;    中级问题 #   存储字符串 \u0026ldquo;中国\u0026rdquo; 需要几个字节?\n  首先 \u0026ldquo;中国\u0026rdquo; 两个字是属于汉字，需要使用支持汉字的字符集才能使用，每一种字符集存储时占用的字节也会不一样，下面举例出一些常用的字符集以及对应的占用字节数  GB 2312-80: 容纳常用简体字，常用EUC-CN形式。字符长度为 6 GBK: 由微软扩展到 Unicode 1.0 全部汉字。字符长度为 4 GB 18030: 扩展到可以表示所有万国码字符。字符长度为 4    高级问题 #   什么是编码 (Code) ?\n  编码是信息从一种形式或格式转换为另一种形式的过程；解码则是编码的逆过程。常见的编码有:  字符编码: 是一套法则，使用该法则能够对自然语言的字符的一个集合，与其他东西的一个集合进行配对。    计算机的三个根本性基础 #   计算机的三大原则是什么?\n  计算机是执行输入、运算、输出 的机器 程序是 指令 和 数据 的集合 计算机的处理方式有时与人们的思维习惯不同  输入、运算、输出是硬件的基础 #   从硬件上来看，可以说计算机是执行输入、运算、输出三种操作的机器。\n  电脑: 键盘鼠标(输入) + CUP(运算) + 显示器(输出) 电视: 遥控器(输入) + 处理器(运算) + 电视画面(输出)  软件是指令和数据的集合 #   指令是控制计算机进行输入、运算、输出的命令  函数 语句 方法 子例程 子程序   数据分为输入数据和输出数据  变量    对计算机来说什么都是数字 #   用数字表示所有信息，这就是一个很具有代表性的计算机式的处理方法\n  颜色的 hex 值 文件句柄  "});index.add({'id':9,'href':'/read-notes/docs/basic/how-computers-work/','title':"计算机是怎么连接的",'section':"基础阶段",'content':"计算机是怎么连接的 #  每个章节会对书中的问答进行一些解答和分析\n 阅读目的是了解有关计算机技术的知识范围，掌握其中的基础知识，能够了解计算机的本质。\n 目录 #  每个章节的标题以及当前的总结进度\n 计算机的三大原则 (待完成)  "});})();